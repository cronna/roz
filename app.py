from flask import Flask, render_template, request, jsonify
import os
import requests
import asyncio
from models import Giveaway
from requests import get_giveaway_details, join_giveaway

app = Flask(__name__)
app.config['BOT_TOKEN'] = os.environ.get('BOT_TOKEN', '7790467084:AAGYK-Gm60ailV6B0q5K4bOgNaQ01oOu0L0')

def run_async(coro):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(coro)
    finally:
        loop.close()

@app.route('/')
def index():
    start_param = request.args.get('start_param', '')
    giveaway_id = start_param.split('_')[1] if '_' in start_param else ''
    
    if not giveaway_id.isdigit():
        return render_template('error.html', message='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
    giveaway = run_async(get_giveaway_details(int(giveaway_id)))
    
    if not giveaway:
        return render_template('error.html', message='–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Giveaway –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–∞–±–ª–æ–Ω
    giveaway_data = {
        'id': giveaway.id,
        'name': giveaway.name,
        'description': giveaway.description,
        'participants': giveaway.participants,
        'max_participants': giveaway.max_participants,
        'is_active': giveaway.is_active,
        'channels': [{'title': channel.title} for channel in giveaway.channels]
    }
    
    return render_template('index.html', giveaway=giveaway_data)

@app.route('/participate', methods=['POST'])
def handle_participation():
    data = request.json
    user_id = data.get('user_id')
    giveaway_id = data.get('giveaway_id')

    if not user_id or not giveaway_id:
        return jsonify({'status': 'error', 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    try:
        success = run_async(join_giveaway(giveaway_id, user_id))
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

    if not success:
        return jsonify({
            'status': 'error',
            'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
        }), 400

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
    bot_token = app.config['BOT_TOKEN']
    message = f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\nID —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {giveaway_id}"
    api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    try:
        response = requests.post(
            api_url,
            json={
                'chat_id': user_id,
                'text': message
            }
        )
        response.raise_for_status()
        return jsonify({'status': 'success'})
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'
        }), 500

if __name__ == '__main__':
    app.run(debug=True)