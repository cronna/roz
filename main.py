import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from src.models import async_main
from keyboards import *
import json
from app import app

logging.basicConfig(level=logging.INFO)

API_TOKEN = '8194187894:AAGmqMe6Nw0oZn9f77UpciKR4qf8GatZZ1w'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class GiveawayStates(StatesGroup):
    name = State()
    description = State()
    max_participants = State()
    add_channels = State()
    select_winner = State()

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
async def process_create_giveaway(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(GiveawayStates.name)

@dp.message(GiveawayStates.name)
async def process_name(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:")
    await state.set_state(GiveawayStates.description)

@dp.message(GiveawayStates.description)
async def process_description(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    await state.set_state(GiveawayStates.max_participants)

@dp.message(GiveawayStates.max_participants)
async def process_max_participants(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    try:
        max_participants = int(message.text)
        if max_participants <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    
    await state.update_data(max_participants=max_participants)
    await message.answer("–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–¥–æ 10).", reply_markup=add_channel_kb)

@dp.callback_query(F.data == 'add_channel')
async def add_channel_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞ –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:')
    await state.set_state(GiveawayStates.add_channels)

@dp.message(GiveawayStates.add_channels)
async def process_add_channels(message: Message, state: FSMContext):
    global bot
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    
    if not message.forward_from_chat or message.forward_from_chat.type != 'channel':
        await message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞!")
        return
    
    try:
        chat_member = await bot.get_chat_member(message.forward_from_chat.id, bot.id)
        if chat_member.status not in ['administrator', 'creator']:
            await message.answer("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    
    data = await state.get_data()
    giveaway_id = data.get('giveaway_id')
    user_id = message.from_user.id
    
    if not giveaway_id:
        giveaway_data = {
            'name': data['name'],
            'description': data['description'],
            'max_participants': data['max_participants'],
            'creator_id': user_id
        }
        giveaway_id = await create_giveaway(**giveaway_data)
        await state.update_data(giveaway_id=giveaway_id)
    
    channel_id = await create_channel(
        tg_id=message.forward_from_chat.id,
        title=message.forward_from_chat.title,
        invite_link=f"https://t.me/{message.forward_from_chat.username}" if message.forward_from_chat.username else await bot.export_chat_invite_link(message.forward_from_chat.id),
        creator_id=user_id
    )
    
    success = await add_channel_to_giveaway(giveaway_id, channel_id)
    if not success:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    channels = await get_giveaway_channels(giveaway_id)
    channels_count = len(channels)
    
    if channels_count >= 10:
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ (10). –†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω!", reply_markup=main_menu())
        await state.clear()
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª", callback_data='add_channel')
        builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data='finish_add_channels')
        builder.adjust(1, repeat=True)
        await message.answer(
            f"–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {channels_count}/10.",
            reply_markup=builder.as_markup()
        )

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
@dp.callback_query(F.data == "finish_add_channels")
async def finish_add_channels(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    giveaway_id = data['giveaway_id']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º deep link
    deep_link = f"https://t.me/givegive2323bot/givegive2323bot?startapp=giveaway_{giveaway_id}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await set_give_link(giveaway_id, deep_link)
    
    await callback.message.answer(
        f"üéâ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è: {deep_link}",
        reply_markup=main_menu()
    )
    await state.clear()

@dp.message(F.text == "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
async def show_my_giveaways(message: Message):
    giveaways = await get_all_give()
    if not giveaways:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.")
        return
    
    await message.answer("–í–∞—à–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:", reply_markup=await pagination_keyboard(1))

@dp.callback_query(F.data.startswith('page_'))
async def to_right(callback: CallbackQuery):
    await callback.answer()
    page = int(callback.data.split('_')[1])
    await callback.message.edit_reply_markup(reply_markup=await pagination_keyboard(page))

@dp.callback_query(lambda c: c.data.startswith('giveaway_'))
async def process_giveaway(callback: CallbackQuery):
    giveaway_id = int(callback.data.split('_')[1])
    giveaway = await get_giveaway_details(giveaway_id)
    
    if not giveaway:
        await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    text = (
        f"üéâ –†–æ–∑—ã–≥—Ä—ã—à: {giveaway.name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {giveaway.description}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {giveaway.participants}/{giveaway.max_participants}\n"
        f"üÜî ID: {giveaway.id}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=giveaway_details_keyboard(giveaway.id)
    )


@dp.callback_query(F.data.startswith('join_'))
async def join_giveaway_handler(callback: CallbackQuery):
    giveaway_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    
    giveaway = await get_giveaway_details(giveaway_id)
    if not giveaway:
        await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    channel_ids = [channel.tg_id for channel in giveaway.channels]
    if not channel_ids:
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        success = await join_giveaway(giveaway_id, user_id)
        if success:
            await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
    channels_kb = await channels_subscription_keyboard(giveaway_id)
    
    await callback.message.edit_text(
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
        reply_markup=channels_kb
    )

@dp.callback_query(F.data.startswith('check_subscription_'))
async def check_subscription_handler(callback: CallbackQuery):
    giveaway_id = int(callback.data.split('_')[2])
    user_id = callback.from_user.id
    
    giveaway = await get_giveaway_details(giveaway_id)
    if not giveaway:
        await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    channel_ids = [channel.tg_id for channel in giveaway.channels]
    if not channel_ids:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")
        return
    
    is_subscribed = await check_user_subscription(user_id, channel_ids, bot)
    if is_subscribed:
        success = await join_giveaway(giveaway_id, user_id)
        if success:
            await callback.message.edit_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!",
                reply_markup=giveaway_details_keyboard(giveaway_id)
            )
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    else:
        await callback.answer("–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")



 # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

@dp.callback_query(F.data.startswith('manage_giveaway_'))
async def manage_giveaway(callback: CallbackQuery):
    giveaway_id = int(callback.data.split('_')[2])
    giveaway = await get_giveaway_details(giveaway_id)
    
    if not giveaway:
        await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if giveaway.creator_id != callback.from_user.id:
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        return
    
    participants = await get_giveaway_participants(giveaway_id)
    
    if not participants:
        await callback.answer("–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    await callback.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º: {giveaway.name}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}/{giveaway.max_participants}",
        reply_markup=await giveaway_management_keyboard(giveaway_id)
    )

@dp.callback_query(F.data.startswith('select_winner_'))
async def start_select_winner(callback: CallbackQuery, state: FSMContext):
    giveaway_id = int(callback.data.split('_')[2])
    await state.update_data(giveaway_id=giveaway_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∏–≥—Ä–∞–ª:")
    await state.set_state(GiveawayStates.select_winner)

@dp.message(GiveawayStates.select_winner)
async def process_select_winner(message: Message, state: FSMContext):
    try:
        winner_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return
    
    data = await state.get_data()
    giveaway_id = data['giveaway_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
    is_participant = await check_participant(giveaway_id, winner_id)
    if not is_participant:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    success = await finish_giveaway(giveaway_id, winner_id)
    if not success:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    participants = await get_giveaway_participants(giveaway_id)
    giveaway = await get_giveaway_details(giveaway_id)
    
    for participant in participants:
        try:
            await bot.send_message(
                participant.user_id,
                f"–†–æ–∑—ã–≥—Ä—ã—à '{giveaway.name}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{participant.username if participant.username else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {winner_id})\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {participant.user_id}: {e}")
    
    await message.answer("–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
    await state.clear()

@dp.message(Command('get_giveaway_info'))
async def get_giveaway_info(message: Message):
    giveaway_id = message.text.split('=')[1]
    giveaway = await get_giveaway_details(giveaway_id)
    
    channels_info = [{
        'title': channel.title,
        'invite_link': channel.invite_link
    } for channel in giveaway.channels]
    
    await message.answer(json.dumps({
        'channels': channels_info
    }))

@dp.message(Command('check_subscriptions'))
async def check_subscriptions(message: Message):
    data = json.loads(message.text)
    user_id = data['user_id']
    giveaway_id = data['giveaway_id']
    
    giveaway = await get_giveaway_details(giveaway_id)
    channel_ids = [channel.tg_id for channel in giveaway.channels]
    
    is_subscribed = await check_user_subscription(user_id, channel_ids, bot)
    
    await message.answer(json.dumps({
        'all_subscribed': is_subscribed
    }))

async def main():
    await async_main()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
    app.run(debug=True)
    